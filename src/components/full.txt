import React from 'react';
import { Deck, Slide, Heading } from 'spectacle';
import { observer } from 'mobx-react';
import { useMst } from '../context/context';
import useFullscreenStatus from '../modules/useReactFullScreenStatus'

export const SlideShow = observer(() => {

  // const maximizableElement = React.useRef(null);

  // let isFullscreen, setIsFullscreen;
  // let errorMessage;

  // try {
  //   [isFullscreen, setIsFullscreen] = useFullscreenStatus(maximizableElement);
  // } catch (e) {
  //   errorMessage = "Fullscreen not supported";
  //   isFullscreen = false;
  //   setIsFullscreen = undefined;
  // }
  // const handleExitFullscreen = () => document.exitFullscreen();
  const store = useMst();
  return (
    // <div
    //   ref={maximizableElement}
    //   className={`maximizable-container ${
    //     isFullscreen ? "fullscreen" : "default"
    //     }`}
    //   style={{ backgroundColor: isFullscreen ? backgroundColor : null }}
    // >
    <Deck>
      <Slide>
        <Heading>Welcome to 1</Heading>
      </Slide>
      <Slide>
        <Heading>Welcome to 2</Heading>
      </Slide>
      <Slide>
        <Heading>Welcome to 3</Heading>
      </Slide>
    </Deck>

    //   <div className="maximizable-actions">
    //     {errorMessage ? (
    //       <button
    //         onClick={() =>
    //           alert(
    //             "Fullscreen is unsupported by this browser, please try another browser."
    //           )
    //         }
    //       >
    //         {errorMessage}
    //       </button>
    //     ) : isFullscreen ? (
    //       <button onClick={handleExitFullscreen}>Exit Fullscreen</button>
    //     ) : (
    //           <button onClick={setIsFullscreen}>Fullscreen</button>
    //         )}
    //   </div>
    // </div>
  );

})


<Slide>
        <FlexBox height="100%" flexDirection="column">
          <Heading margin="0px" fontSize="150px">
            SPECTACLE
        </Heading>
          <Heading margin="0px" fontSize="h2">
            A ReactJS Presentation Library
        </Heading>
          <Heading margin="0px 32px" color="primary" fontSize="h3">
            Where you can write your decks in JSX, Markdown, or MDX!
        </Heading>
        </FlexBox>
        <Notes>
          <p>
            Notes are shown in presenter mode. Open up
            localhost:3000/?presenterMode=true to see them.
        </p>
        </Notes>
      </Slide>
      <Slide
        backgroundColor="tertiary"
        backgroundImage="url(https://github.com/FormidableLabs/dogs/blob/master/beau.jpg?raw=true)"
        backgroundOpacity={0.5}
      >
        <Heading>Custom Backgrounds</Heading>
        <UnorderedList>
          <ListItem>
            <CodeSpan>backgroundColor</CodeSpan>
          </ListItem>
          <ListItem>
            <CodeSpan>backgroundImage</CodeSpan>
          </ListItem>
          <ListItem>
            <CodeSpan>backgroundOpacity</CodeSpan>
          </ListItem>
          <ListItem>
            <CodeSpan>backgroundSize</CodeSpan>
          </ListItem>
          <ListItem>
            <CodeSpan>backgroundPosition</CodeSpan>
          </ListItem>
          <ListItem>
            <CodeSpan>backgroundRepeat</CodeSpan>
          </ListItem>
        </UnorderedList>
      </Slide>
      <Slide transitionEffect="slide">
        <Heading>Code Blocks</Heading>
        <Stepper
          defaultValue={[]}
          values={[
            [1, 1],
            [23, 25],
            [40, 42]
          ]}
        >
          {(value, step) => (
            <Box position="relative">
              <CodePane
                highlightStart={value[0]}
                highlightEnd={value[1]}
                fontSize={18}
                language="cpp"
                autoFillHeight
              >
                {cppCodeBlock}
              </CodePane>

              <Box
                position="absolute"
                bottom="0rem"
                left="0rem"
                right="0rem"
                bg="black"
              >
                {/* This notes container won't appear for step 0 */}

                {step === 1 && (
                  <Text fontSize="1.5rem" margin="0rem">
                    This is a note!
                  </Text>
                )}

                {step === 2 && (
                  <Text fontSize="1.5rem" margin="0rem">
                    You can use the stepper state to render whatever you like as
                    you step through the code.
                  </Text>
                )}
              </Box>
            </Box>
          )}
        </Stepper>
        <Text>
          Code Blocks now auto size and scroll when there is an overflow of
          content! They also auto-wrap longer lines.
      </Text>
      </Slide>
      <Slide>
        <Heading>Animated Elements</Heading>
        <OrderedList>
          <Appear elementNum={0}>
            <ListItem>Elements can animate in!</ListItem>
          </Appear>
          <Appear elementNum={2}>
            <ListItem>
              Just identify the order with the prop{' '}
              <CodeSpan>elementNum</CodeSpan>!
          </ListItem>
          </Appear>
          <Appear elementNum={1}>
            <ListItem>Out of order</ListItem>
          </Appear>
        </OrderedList>
      </Slide>
      <Slide>
        <FlexBox>
          <Text>These</Text>
          <Text>Text</Text>
          <Text color="secondary">Items</Text>
          <Text fontWeight="bold">Flex</Text>
        </FlexBox>
        <Grid gridTemplateColumns="1fr 2fr" gridColumnGap={15}>
          <Box backgroundColor="primary">
            <Text color="secondary">Single-size Grid Item</Text>
          </Box>
          <Box backgroundColor="secondary">
            <Text>Double-size Grid Item</Text>
          </Box>
        </Grid>
        <Grid
          gridTemplateColumns="1fr 1fr 1fr"
          gridTemplateRows="1fr 1fr 1fr"
          alignItems="center"
          justifyContent="center"
          gridRowGap={1}
        >
          {Array(9)
            .fill('')
            .map((_, index) => (
              <FlexBox paddingTop={0} key={`formidable-logo-${index}`} flex={1}>
                <Image src={formidableLogo} width={100} />
              </FlexBox>
            ))}
        </Grid>
      </Slide>
      <Slide>
        <Markdown>
          {`
          # Layout Tables in Markdown
          | Browser         | Supported | Versions |
          |-----------------|-----------|----------|
          | Chrome          | Yes       | Last 2   |
          | Firefox         | Yes       | Last 2   |
          | Opera           | Yes       | Last 2   |
          | Edge (EdgeHTML) | No        |          |
          | IE 11           | No        |          |
        `}
        </Markdown>
      </Slide>